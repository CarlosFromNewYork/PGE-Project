#Preamble

In order PGE Manager to actually work, a few components need to be developed.
The functionality of the manager will be similar to the Minecraft launcher.

Users download "PGE-Manager.exe". However, PGE-Manager.exe is but a dummy executable. It will download the latest/necessary components of the real PGE-Manager, similar to bootstrapping.

When the real manager opens, 

-Any configs in the install directory will be moved into the user's home folder
-an update check will be done. If an update is found, we notify the user and ask if they want to install. If they decline, we will ask them again on next startup.


# First Run
On first run of the program, users will be asked for their PGE Directory (or, it will be read from the registry if applicable). However, if a PGE directory is not detected, we will install it for them.

The latest release will be downloaded and extracted to the directory of their choice. After this, we will ask them what configuration they want to use. 

# From there on out
From there on out, users still run PGE-Manager.exe. The flow of the program will look like this.

- User runs PGE-Manager.exe
- It bootstraps the necessary files
- Real PGE-Manager.exe is ran
- Check for updates
	-If updates are found, ask the user to update
	-If they decline, ask again on startup
-Show a simple two tabbed interface
	-One tab will contain a news/web section
	-The other tab will manager configurations
	-At the bottom there will always be a "launch editor" and "launch engine" button. The latest versions will be shown besides that
	-There will also be a settings menu somewhere, for configuring things.
-The user launches their program of choice
	-If the user doesn't want the launcher/manager to close, the launcher will stay open. A new tab will spawn, and program output will be redirected.
	-However, if they do, the manager will close and their program of choice will launch.
	-(Maybe) shortcuts to the other programs such as Gif2PNG, Playable Calibrator, etc will be nested in a menu. This is a maybe due to the fact they're already inside of the editor

PGE Repositories:
Win32 installable version:
 - http://download.gna.org/pgewohlstand/dev/win32/online-install/
install-pge-common-dev-win32.zip - REQUIRED BY EDITOR AND ENGINE, tools can be used without this pack
install-pge-editor-dev-win32.zip - editor, after unpacking run "pge_editor.exe --install" to associate file types and init %UserProfile%\.PGE_Project directory
install-pge-engine-dev-win32.zip - game engine, after unpacking run "pge_engine.exe --install" to associate file types and init %UserProfile%\.PGE_Project directory
install-pge-tools-dev-win32.zip - additional tools, after unpacking run "pge_calibrator.exe --install"

on Linux user path is ~/.PGE_Project

Structure of user directory:

worlds - levels and episodes
screenshots - made screenshots by engine. If folder not exists, it will be created
logs - contains a log files generated by editor and by engine
configs - additional folder where you can place a config packs too (not only to PGEAppDir/configs)
calibrator - settings files and defaults for a calibration tool

Config packs repo:
http://download.gna.org/pgewohlstand/configs/

config.index - list of available config packs with names of folders where config packs are placed and timestamp of updating
*/pge_cpack.xml - information about config pack, images, license, credits, and downloads


# Misc Notes

PGE will also load configs from the user directory if

Windows
Editor:
- Registry key: HKEY_CURRENT_USER\\Software\\Wohlhabend Networks\\PGE Editor\\EnableUserDir=true
Engine:
- Registry key: HKEY_CURRENT_USER\\Software\\Wohlhabend Networks\\PGE Engine\\EnableUserDir=true
Playable Character Calibrator:
- Registry key: HKEY_CURRENT_USER\\Software\\Wohlhabend Networks\\Playable Character Calibrator\\EnableUserDir=true

Linux
- ~/.config/Wohlhabend-Networks/PGE Editor.conf has
  [General]
  EnableUserDir=true
same for:
- ~/.config/Wohlhabend-Networks/PGE Engine.conf
- ~/.config/Wohlhabend-Networks/Playable Character Calibrator.conf

I need to detect if the user is running portable. This is done by checking if
-pge configs and executables are in the same directory
-main INI has force-portable=true enabled
If this is the case, install configs to the same directory

Mac OS X:
- Always uses User Directory

