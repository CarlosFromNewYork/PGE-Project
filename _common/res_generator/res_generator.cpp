#include <string>
#include <unordered_map>
#include <stdio.h>
#include <vector>
#include <ini_processing.h>

const char* splash =    "/*****************************************************************\n"
                        "     Automatically generated by _common/res_generator utility\n"
                        "     Suggested to DONT EDIT THIS\n"
                        "     Edit the _common/res_generator/res_generator.cpp instead\n"
                        " *****************************************************************/\n\n";

int main(int argc, char**argv)
{
    IniProcessing ini;
    std::string folderAt = "../../Engine/_resources/";
    std::string iniFile = "resource.ini";
    
    ini.open(folderAt + iniFile);
    unsigned int count = 0;
    ini.beginGroup("resources");
    ini.read("count", count, 0);
    ini.endGroup();

    if(count==0)
    {
        printf("Nothing to do! (zero count)\n");
        return 1;
    }

    typedef std::unordered_map<std::string, std::string> filesMap;
    filesMap files;

    for(unsigned int i=0; i<count; i++)
    {
        std::string name;
        std::string path;
        ini.beginGroup("file-" + std::to_string(i));
        ini.read("name", name, "");
        ini.read("path", path, "");
        ini.endGroup();
        files[name] = folderAt + path;
    }

    std::string outH = folderAt + "resource.h";
    std::string outC = folderAt + "resource.cpp";
    FILE* outh = fopen(outH.c_str(), "w");
    FILE* outc = fopen(outC.c_str(), "w");

    fprintf(outc, "%s", splash);
    fprintf(outh, "%s", splash);

    unsigned int fileCount = 0;

    std::vector<std::string> fileNames;
    std::vector<unsigned long> fileSizes;

    fprintf(outc,   "#include <stdio.h>\n"
                    "#include <unordered_map>\n"
                    "#include <string>\n"
                    "#include \"resource.h\"\n"
                    "\n\n"
                    "struct FileEntry{ const unsigned char*array; size_t size; };\n"
                    );

    for(filesMap::iterator it = files.begin(); it != files.end(); it++, fileCount++)
    {
        unsigned long fileSize = 0;
        fprintf(outc, "\n\nstatic const unsigned char file_%d[] = \n{\n", fileCount);
        FILE* ps = fopen(it->second.c_str(), "rb");
        if(!ps)
        {
            printf("FAILED TO OPEN FILE %s", it->second.c_str());
            continue;
        }
        int c;
        int breaker = 0;
        while( (c = fgetc(ps)) != -1 )
        {
            fprintf(outc, "\t0x%0X,", static_cast<unsigned int>(c));
            fileSize++;
            breaker++;
            if(breaker>=20)
            {
                fprintf(outc, "\n");
                breaker = 0;
            }
        }
        fclose(ps);
        fileSizes.push_back(fileSize);
        fileNames.push_back(it->first);
        fprintf(outc, "\n};\n");
    }

    fprintf(outc, "static std::unordered_map<std::string, FileEntry> filesMap = \n{\n");
    for(unsigned long i=0; i<fileSizes.size(); i++)
    {
        fprintf(outc, "\t{\"%s\",\t{file_%lu,\t%lu}},\n", fileNames[i].c_str(), i, fileSizes[i]);
    }
    fprintf(outc, "};\n\n\n");

    fprintf(outc,   "FILE* RES_open(const char* file)\n{\n"
                    "   std::unordered_map<std::string, FileEntry>::iterator f = filesMap.find(file);\n"
                    "   if(f == filesMap.end())\n"
                    "       return nullptr;\n\n"
                    "   FileEntry& e = f->second;\n"
                    "   return fmemopen(reinterpret_cast<void*>(const_cast<unsigned char*>(e.array)), e.size, \"rb\");\n"
                    "}\n\n"

                    "void RES_getMem(const char* file, char* &mem, size_t &size)\n{\n"
                    "   std::unordered_map<std::string, FileEntry>::iterator f = filesMap.find(file);\n"
                    "   if(f == filesMap.end())\n"
                    "       throw(\"Resource doesn't exists!\");\n\n"
                    "   FileEntry& e = f->second;\n"
                    "   mem = const_cast<char*>(reinterpret_cast<const char*>(e.array));\n"
                    "   size = e.size;\n"
                    "}\n\n");

    fprintf(outh, "#include <stdio.h>\n\n");
    fprintf(outh, "extern FILE* RES_open(const char* file);\n");
    fprintf(outh, "extern void RES_getMem(const char* file, char* &mem, size_t &size);\n\n");

    fclose(outh);
    fclose(outc);

    printf("All %d resources has being built!\n", count);

    return 0;
}
